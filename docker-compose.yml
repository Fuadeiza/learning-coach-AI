version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: learning_coach_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: learning_coach_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - learning_coach_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d learning_coach_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache (Optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: learning_coach_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - learning_coach_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # AI Learning Coach Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: learning_coach_web
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://postgres:password@db:5432/learning_coach_db
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: learning_coach_db
      DB_USER: postgres
      DB_PASSWORD: password
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      
      # JWT Configuration (Override with secure values in production)
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-docker-jwt-secret-change-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your_openai_api_key_here}
      
      # Application Configuration
      ENVIRONMENT: docker
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080,http://localhost:8001}
      
      # Rate Limiting
      LOGIN_RATE_LIMIT_ATTEMPTS: 5
      LOGIN_RATE_LIMIT_WINDOW_MINUTES: 15
      REGISTRATION_RATE_LIMIT_ATTEMPTS: 3
      REGISTRATION_RATE_LIMIT_WINDOW_MINUTES: 60
    volumes:
      - ./logs:/app/logs
      - app_data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - learning_coach_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Database Administration (Optional - for development)
  adminer:
    image: adminer:latest
    container_name: learning_coach_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - learning_coach_network
    profiles:
      - dev

  # Redis Commander (Optional - for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: learning_coach_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: redis:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - learning_coach_network
    profiles:
      - dev

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local

# Custom network for service communication
networks:
  learning_coach_network:
    driver: bridge
    name: learning_coach_network
